// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20190515113507_Seed")]
    partial class Seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Origin.BioMeasure", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateMeasured");

                    b.Property<string>("MatchId");

                    b.Property<string>("PlayerId");

                    b.Property<int>("Pressure");

                    b.Property<int>("Pulse");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("BioMeasures");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8209),
                            MatchId = "1",
                            PlayerId = "1",
                            Pressure = 80,
                            Pulse = 90
                        },
                        new
                        {
                            Id = "2",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8212),
                            MatchId = "1",
                            PlayerId = "2",
                            Pressure = 90,
                            Pulse = 100
                        },
                        new
                        {
                            Id = "3",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8215),
                            MatchId = "1",
                            PlayerId = "3",
                            Pressure = 75,
                            Pulse = 95
                        },
                        new
                        {
                            Id = "4",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8218),
                            MatchId = "1",
                            PlayerId = "4",
                            Pressure = 80,
                            Pulse = 70
                        },
                        new
                        {
                            Id = "5",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8220),
                            MatchId = "1",
                            PlayerId = "5",
                            Pressure = 84,
                            Pulse = 80
                        },
                        new
                        {
                            Id = "6",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8223),
                            MatchId = "1",
                            PlayerId = "6",
                            Pressure = 150,
                            Pulse = 40
                        },
                        new
                        {
                            Id = "7",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8226),
                            MatchId = "1",
                            PlayerId = "7",
                            Pressure = 160,
                            Pulse = 160
                        },
                        new
                        {
                            Id = "8",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8229),
                            MatchId = "1",
                            PlayerId = "8",
                            Pressure = 30,
                            Pulse = 20
                        },
                        new
                        {
                            Id = "9",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8231),
                            MatchId = "1",
                            PlayerId = "9",
                            Pressure = 62,
                            Pulse = 67
                        },
                        new
                        {
                            Id = "10",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8234),
                            MatchId = "1",
                            PlayerId = "10",
                            Pressure = 400,
                            Pulse = 400
                        },
                        new
                        {
                            Id = "11",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8237),
                            MatchId = "2",
                            PlayerId = "1",
                            Pressure = 100,
                            Pulse = 80
                        },
                        new
                        {
                            Id = "12",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8239),
                            MatchId = "2",
                            PlayerId = "2",
                            Pressure = 83,
                            Pulse = 90
                        },
                        new
                        {
                            Id = "13",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8242),
                            MatchId = "2",
                            PlayerId = "3",
                            Pressure = 120,
                            Pulse = 87
                        },
                        new
                        {
                            Id = "14",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8245),
                            MatchId = "2",
                            PlayerId = "4",
                            Pressure = 70,
                            Pulse = 120
                        },
                        new
                        {
                            Id = "15",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8247),
                            MatchId = "2",
                            PlayerId = "5",
                            Pressure = 80,
                            Pulse = 90
                        },
                        new
                        {
                            Id = "16",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8250),
                            MatchId = "2",
                            PlayerId = "6",
                            Pressure = 140,
                            Pulse = 150
                        },
                        new
                        {
                            Id = "17",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8253),
                            MatchId = "2",
                            PlayerId = "7",
                            Pressure = 60,
                            Pulse = 60
                        },
                        new
                        {
                            Id = "18",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8255),
                            MatchId = "2",
                            PlayerId = "8",
                            Pressure = 200,
                            Pulse = 30
                        },
                        new
                        {
                            Id = "19",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8258),
                            MatchId = "2",
                            PlayerId = "9",
                            Pressure = 100,
                            Pulse = 79
                        },
                        new
                        {
                            Id = "20",
                            DateMeasured = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8261),
                            MatchId = "2",
                            PlayerId = "10",
                            Pressure = 87,
                            Pulse = 93
                        });
                });

            modelBuilder.Entity("Core.Entities.Origin.Game", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateReleased");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DateReleased = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8152),
                            Description = "Game one description",
                            Name = "Game one"
                        },
                        new
                        {
                            Id = "2",
                            DateReleased = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8156),
                            Description = "Game two description",
                            Name = "Game two"
                        });
                });

            modelBuilder.Entity("Core.Entities.Origin.Match", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("GameId");

                    b.Property<int>("MatchResult");

                    b.Property<string>("TeamOneId");

                    b.Property<string>("TeamTwoId");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TeamOneId");

                    b.HasIndex("TeamTwoId");

                    b.ToTable("Matches");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Date = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8178),
                            GameId = "1",
                            MatchResult = 0,
                            TeamOneId = "1",
                            TeamTwoId = "2"
                        },
                        new
                        {
                            Id = "2",
                            Date = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8181),
                            GameId = "1",
                            MatchResult = 3,
                            TeamOneId = "1",
                            TeamTwoId = "2"
                        });
                });

            modelBuilder.Entity("Core.Entities.Origin.Player", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Nickname");

                    b.Property<string>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            DateOfBirth = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8022),
                            FirstName = "FirstName",
                            LastName = "LastName",
                            Nickname = "Player 1",
                            TeamId = "1"
                        },
                        new
                        {
                            Id = "2",
                            DateOfBirth = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8049),
                            FirstName = "FirstName",
                            LastName = "LastName",
                            Nickname = "Player 2",
                            TeamId = "1"
                        },
                        new
                        {
                            Id = "3",
                            DateOfBirth = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8052),
                            FirstName = "FirstName",
                            LastName = "LastName",
                            Nickname = "Player 3",
                            TeamId = "1"
                        },
                        new
                        {
                            Id = "4",
                            DateOfBirth = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8056),
                            FirstName = "FirstName",
                            LastName = "LastName",
                            Nickname = "Player 4",
                            TeamId = "1"
                        },
                        new
                        {
                            Id = "5",
                            DateOfBirth = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8059),
                            FirstName = "FirstName",
                            LastName = "LastName",
                            Nickname = "Player 5",
                            TeamId = "1"
                        },
                        new
                        {
                            Id = "6",
                            DateOfBirth = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8061),
                            FirstName = "FirstName",
                            LastName = "LastName",
                            Nickname = "Player 6",
                            TeamId = "2"
                        },
                        new
                        {
                            Id = "7",
                            DateOfBirth = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8064),
                            FirstName = "FirstName",
                            LastName = "LastName",
                            Nickname = "Player 7",
                            TeamId = "2"
                        },
                        new
                        {
                            Id = "8",
                            DateOfBirth = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8067),
                            FirstName = "FirstName",
                            LastName = "LastName",
                            Nickname = "Player 8",
                            TeamId = "2"
                        },
                        new
                        {
                            Id = "9",
                            DateOfBirth = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8070),
                            FirstName = "FirstName",
                            LastName = "LastName",
                            Nickname = "Player 9",
                            TeamId = "2"
                        },
                        new
                        {
                            Id = "10",
                            DateOfBirth = new DateTime(2019, 5, 15, 14, 35, 6, 653, DateTimeKind.Local).AddTicks(8072),
                            FirstName = "FirstName",
                            LastName = "LastName",
                            Nickname = "Player 10",
                            TeamId = "2"
                        });
                });

            modelBuilder.Entity("Core.Entities.Origin.Team", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Team one"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Team two"
                        });
                });

            modelBuilder.Entity("Core.Models.Origin.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "35295c9a-ccbd-4421-912b-b2779fde0fb4",
                            ConcurrencyStamp = "a4a9fe9a-97c1-4ddb-b78d-ea24e7516799",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "00633023-d00e-4a73-88fe-08758273e25b",
                            ConcurrencyStamp = "380ff609-2321-4078-9b15-35b32b5484ee",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Core.Entities.Origin.BioMeasure", b =>
                {
                    b.HasOne("Core.Entities.Origin.Match", "Match")
                        .WithMany()
                        .HasForeignKey("MatchId");

                    b.HasOne("Core.Entities.Origin.Player", "Player")
                        .WithMany("BioMeasures")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("Core.Entities.Origin.Match", b =>
                {
                    b.HasOne("Core.Entities.Origin.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId");

                    b.HasOne("Core.Entities.Origin.Team", "TeamOne")
                        .WithMany()
                        .HasForeignKey("TeamOneId");

                    b.HasOne("Core.Entities.Origin.Team", "TeamTwo")
                        .WithMany()
                        .HasForeignKey("TeamTwoId");
                });

            modelBuilder.Entity("Core.Entities.Origin.Player", b =>
                {
                    b.HasOne("Core.Entities.Origin.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Models.Origin.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Models.Origin.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Origin.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Models.Origin.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
